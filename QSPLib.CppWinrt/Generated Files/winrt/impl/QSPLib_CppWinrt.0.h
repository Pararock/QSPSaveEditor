// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.191018.6

#ifndef WINRT_QSPLib_CppWinrt_0_H
#define WINRT_QSPLib_CppWinrt_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
}
WINRT_EXPORT namespace winrt::Windows::Storage
{
    struct StorageFile;
}
WINRT_EXPORT namespace winrt::QSPLib_CppWinrt
{
    enum class Statement : int32_t
    {
        qspStatUnknown = 0,
        qspStatLabel = 1,
        qspStatComment = 2,
        qspStatAct = 3,
        qspStatFor = 4,
        qspStatLocal = 5,
        qspStatIf = 6,
        qspStatElseIf = 7,
        qspStatElse = 8,
        qspStatEnd = 9,
        qspStatAddObj = 10,
        qspStatClA = 11,
        qspStatClear = 12,
        qspStatCloseAll = 13,
        qspStatClose = 14,
        qspStatClS = 15,
        qspStatCmdClear = 16,
        qspStatCopyArr = 17,
        qspStatDelAct = 18,
        qspStatDelObj = 19,
        qspStatDynamic = 20,
        qspStatExec = 21,
        qspStatExit = 22,
        qspStatFreeLib = 23,
        qspStatGoSub = 24,
        qspStatGoTo = 25,
        qspStatIncLib = 26,
        qspStatJump = 27,
        qspStatKillAll = 28,
        qspStatKillObj = 29,
        qspStatKillVar = 30,
        qspStatMClear = 31,
        qspStatMenu = 32,
        qspStatMNL = 33,
        qspStatMPL = 34,
        qspStatMP = 35,
        qspStatMsg = 36,
        qspStatNL = 37,
        qspStatOpenGame = 38,
        qspStatOpenQst = 39,
        qspStatPlay = 40,
        qspStatPL = 41,
        qspStatP = 42,
        qspStatRefInt = 43,
        qspStatSaveGame = 44,
        qspStatSetTimer = 45,
        qspStatSet = 46,
        qspStatShowActs = 47,
        qspStatShowInput = 48,
        qspStatShowObjs = 49,
        qspStatShowVars = 50,
        qspStatUnSelect = 51,
        qspStatView = 52,
        qspStatWait = 53,
        qspStatXGoTo = 54,
        qspStatLast_Statement = 55,
    };
    enum class StatusCode : int32_t
    {
        QSP_ERR_GENERICUNKNOWNERROR = 0,
        QSP_SUCCESS = 1,
        QSP_ERR_CODEEXEDISABLE = 10,
        QSP_ERR_DIVBYZERO = 100,
        QSP_ERR_TYPEMISMATCH = 101,
        QSP_ERR_STACKOVERFLOW = 102,
        QSP_ERR_TOOMANYITEMS = 103,
        QSP_ERR_FILENOTFOUND = 104,
        QSP_ERR_CANTLOADFILE = 105,
        QSP_ERR_GAMENOTLOADED = 106,
        QSP_ERR_COLONNOTFOUND = 107,
        QSP_ERR_CANTINCFILE = 108,
        QSP_ERR_CANTADDACTION = 109,
        QSP_ERR_EQNOTFOUND = 110,
        QSP_ERR_LOCNOTFOUND = 111,
        QSP_ERR_ENDNOTFOUND = 112,
        QSP_ERR_LABELNOTFOUND = 113,
        QSP_ERR_NOTCORRECTNAME = 114,
        QSP_ERR_QUOTNOTFOUND = 115,
        QSP_ERR_BRACKNOTFOUND = 116,
        QSP_ERR_BRACKSNOTFOUND = 117,
        QSP_ERR_SYNTAX = 118,
        QSP_ERR_UNKNOWNACTION = 119,
        QSP_ERR_ARGSCOUNT = 120,
        QSP_ERR_CANTADDOBJECT = 121,
        QSP_ERR_CANTADDMENUITEM = 122,
        QSP_ERR_TOOMANYVARS = 123,
        QSP_ERR_INCORRECTREGEXP = 124,
        QSP_ERR_CODENOTFOUND = 125,
        QSP_ERR_TONOTFOUND = 126,
    };
    struct IEngine;
    struct IEngineStatics;
    struct ILineOfCode;
    struct ILocation;
    struct Engine;
    struct LineOfCode;
    struct Location;
    struct CachedStat;
    struct Result;
}
namespace winrt::impl
{
    template <> struct category<QSPLib_CppWinrt::IEngine>{ using type = interface_category; };
    template <> struct category<QSPLib_CppWinrt::IEngineStatics>{ using type = interface_category; };
    template <> struct category<QSPLib_CppWinrt::ILineOfCode>{ using type = interface_category; };
    template <> struct category<QSPLib_CppWinrt::ILocation>{ using type = interface_category; };
    template <> struct category<QSPLib_CppWinrt::Engine>{ using type = class_category; };
    template <> struct category<QSPLib_CppWinrt::LineOfCode>{ using type = class_category; };
    template <> struct category<QSPLib_CppWinrt::Location>{ using type = class_category; };
    template <> struct category<QSPLib_CppWinrt::Statement>{ using type = enum_category; };
    template <> struct category<QSPLib_CppWinrt::StatusCode>{ using type = enum_category; };
    template <> struct category<QSPLib_CppWinrt::CachedStat>{ using type = struct_category<QSPLib_CppWinrt::Statement, int32_t, int32_t>; };
    template <> struct category<QSPLib_CppWinrt::Result>{ using type = struct_category<hstring, QSPLib_CppWinrt::StatusCode>; };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::Engine>{ L"QSPLib_CppWinrt.Engine" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::LineOfCode>{ L"QSPLib_CppWinrt.LineOfCode" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::Location>{ L"QSPLib_CppWinrt.Location" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::Statement>{ L"QSPLib_CppWinrt.Statement" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::StatusCode>{ L"QSPLib_CppWinrt.StatusCode" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::CachedStat>{ L"QSPLib_CppWinrt.CachedStat" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::Result>{ L"QSPLib_CppWinrt.Result" };
#ifndef WINRT_LEAN_AND_MEAN
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::IEngine>{ L"QSPLib_CppWinrt.IEngine" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::IEngineStatics>{ L"QSPLib_CppWinrt.IEngineStatics" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::ILineOfCode>{ L"QSPLib_CppWinrt.ILineOfCode" };
    template <> inline constexpr auto& name_v<QSPLib_CppWinrt::ILocation>{ L"QSPLib_CppWinrt.ILocation" };
#endif
    template <> inline constexpr guid guid_v<QSPLib_CppWinrt::IEngine>{ 0xFAFF27BB,0x80FC,0x57A5,{ 0x8F,0x4D,0x9C,0xFA,0xF1,0xB9,0x1A,0x82 } };
    template <> inline constexpr guid guid_v<QSPLib_CppWinrt::IEngineStatics>{ 0xF1711EDC,0xA33E,0x58D0,{ 0xA7,0x3A,0x6C,0x63,0xE3,0xA5,0x67,0x40 } };
    template <> inline constexpr guid guid_v<QSPLib_CppWinrt::ILineOfCode>{ 0x7C69601E,0xDD29,0x5E4B,{ 0x9D,0xFA,0xBF,0x05,0xE3,0x9A,0x13,0x9D } };
    template <> inline constexpr guid guid_v<QSPLib_CppWinrt::ILocation>{ 0x774DF029,0x5B91,0x56CD,{ 0x9D,0xE4,0x90,0x70,0xE6,0xAF,0x7A,0x33 } };
    template <> struct default_interface<QSPLib_CppWinrt::Engine>{ using type = QSPLib_CppWinrt::IEngine; };
    template <> struct default_interface<QSPLib_CppWinrt::LineOfCode>{ using type = QSPLib_CppWinrt::ILineOfCode; };
    template <> struct default_interface<QSPLib_CppWinrt::Location>{ using type = QSPLib_CppWinrt::ILocation; };
    template <> struct abi<QSPLib_CppWinrt::IEngine>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall LoadGameWorld(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentGame(void**) noexcept = 0;
            virtual int32_t __stdcall CloseGameWorld() noexcept = 0;
            virtual int32_t __stdcall OpenSavedGame(void*, void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentSave(void**) noexcept = 0;
            virtual int32_t __stdcall get_CurrentLocation(void**) noexcept = 0;
            virtual int32_t __stdcall get_Locations(void**) noexcept = 0;
        };
    };
    template <> struct abi<QSPLib_CppWinrt::IEngineStatics>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Version(void**) noexcept = 0;
            virtual int32_t __stdcall get_CompiledDate(int64_t*) noexcept = 0;
        };
    };
    template <> struct abi<QSPLib_CppWinrt::ILineOfCode>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Text(void**) noexcept = 0;
            virtual int32_t __stdcall get_LineNum(int32_t*) noexcept = 0;
            virtual int32_t __stdcall get_IsMultiline(bool*) noexcept = 0;
            virtual int32_t __stdcall get_Label(void**) noexcept = 0;
            virtual int32_t __stdcall get_CachedStats(void**) noexcept = 0;
        };
    };
    template <> struct abi<QSPLib_CppWinrt::ILocation>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_Name(void**) noexcept = 0;
            virtual int32_t __stdcall get_Desc(void**) noexcept = 0;
            virtual int32_t __stdcall get_OnVisitLines(void**) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_QSPLib_CppWinrt_IEngine
    {
        auto LoadGameWorld(Windows::Storage::StorageFile const& questGameWorld) const;
        [[nodiscard]] auto CurrentGame() const;
        auto CloseGameWorld() const;
        auto OpenSavedGame(Windows::Storage::StorageFile const& saveGame) const;
        [[nodiscard]] auto CurrentSave() const;
        [[nodiscard]] auto CurrentLocation() const;
        [[nodiscard]] auto Locations() const;
    };
    template <> struct consume<QSPLib_CppWinrt::IEngine>
    {
        template <typename D> using type = consume_QSPLib_CppWinrt_IEngine<D>;
    };
    template <typename D>
    struct consume_QSPLib_CppWinrt_IEngineStatics
    {
        [[nodiscard]] auto Version() const;
        [[nodiscard]] auto CompiledDate() const;
    };
    template <> struct consume<QSPLib_CppWinrt::IEngineStatics>
    {
        template <typename D> using type = consume_QSPLib_CppWinrt_IEngineStatics<D>;
    };
    template <typename D>
    struct consume_QSPLib_CppWinrt_ILineOfCode
    {
        [[nodiscard]] auto Text() const;
        [[nodiscard]] auto LineNum() const;
        [[nodiscard]] auto IsMultiline() const;
        [[nodiscard]] auto Label() const;
        [[nodiscard]] auto CachedStats() const;
    };
    template <> struct consume<QSPLib_CppWinrt::ILineOfCode>
    {
        template <typename D> using type = consume_QSPLib_CppWinrt_ILineOfCode<D>;
    };
    template <typename D>
    struct consume_QSPLib_CppWinrt_ILocation
    {
        [[nodiscard]] auto Name() const;
        [[nodiscard]] auto Desc() const;
        [[nodiscard]] auto OnVisitLines() const;
    };
    template <> struct consume<QSPLib_CppWinrt::ILocation>
    {
        template <typename D> using type = consume_QSPLib_CppWinrt_ILocation<D>;
    };
    struct struct_QSPLib_CppWinrt_CachedStat
    {
        int32_t Stat;
        int32_t EndPos;
        int32_t ParamPos;
    };
    template <> struct abi<QSPLib_CppWinrt::CachedStat>
    {
        using type = struct_QSPLib_CppWinrt_CachedStat;
    };
    struct struct_QSPLib_CppWinrt_Result
    {
        void* Message;
        int32_t Code;
    };
    template <> struct abi<QSPLib_CppWinrt::Result>
    {
        using type = struct_QSPLib_CppWinrt_Result;
    };
}
#endif
